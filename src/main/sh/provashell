# PROVASHELL FUNCTIONS - Shell unit testing for the masses

#  Copyright 2014 Daniel Giribet <dani - calidos.cat>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# CONSTANTS
PASSED_=0
OK_=0
ERR_=1
NOTPASSED_=3
ERR_PARAMS_=4
ERR_TESTNOTVALID_=5

#### ENVIRONMENT VARIABLES ####

# PS_SKIP_ALL: provashell does not run any tests and only loads its functions
# PS_VERBOSE: output diagnostics stuff on STDOUT
# PS_TRACE: print asserts to STDERR
# PS_QUIET: be absolutely quiet, overrides verbose and trace
# PS_EXIT_ON_FAIL:
# PS_FAILS_TO_STDERR:

#PS_SKIP_ALL=
#PS_VERBOSE=
#PS_QUIET=
#PS_EXIT_ON_FAIL=
#PS_FAILS_TO_STDERR=
[ -z "$PS_NET_TIMEOUT" ] && PS_NET_TIMEOUT=1

# INTERNAL HELPER FUNCTIONS

# ______________________________________________________________________________
# Output message on STDERR <message>
echoerr_() { printf %s\\n "$@" 1>&2; }


# ______________________________________________________________________________
# Output message on STDOUT if flags allow us <message>
echoVerbose_() { [ -n "$PS_VERBOSE" ] && [ -z "$PS_QUIET" ] && printf %s\\n "$@"; }

# ______________________________________________________________________________
# Output message on STDERR if flags allow us <message>
echoTrace_() { 
	m_="$@"
	if isSkippingTests; then
		m_="(skipped) $m_"
	fi
	[ -n "$PS_TRACE" ] && [ -z "$PS_QUIET" ] && printf \\t%s\\n "$m_" 1>&2; 
}

# ______________________________________________________________________________  
# Exit if test just failed and our settings are set to exit on test assert fails
exitIfFailedAndConfiguredToExit_() { 
	[ -n "$PS_EXIT_ON_FAIL" ] && [ "$1" -ne 0 ] && exit "$1"
}


# ------------------------------------------------------------------------------
getPath_() {
	# linux whereis adds a prefix with the bin and ':' and macosx doesn't =)
	# let's use which
	which "$1"
}


# ------------------------------------------------------------------------------
ping_() {
	host_="$1"
	# suppress statistics (stderr will still go out)
	# using -W as it seems to be the standard
	/sbin/ping -q -W "$PS_NET_TIMEOUT" -c 1 -o "$host_" >/dev/null
	return $?
}


# ------------------------------------------------------------------------------
tcpconnect_() {
	# try to connect to host $1 on port $2
	host_="$1"
	port_="$2"
	nc_=$( getPath_ 'nc' )
	if [ -x "$nc_" ]; then
		# -w: timeout -z: scan port 
		$nc_ -w "$PS_NET_TIMEOUT" -z -G 2 "$host_" "$port_" < /dev/null
	else
		echoVerbose_ "skipping assertTCPConnect on '$host_ $port', no netcat found"
		asserts_=$((asserts_-1))
		return 0
	fi
}

# ------------------------------------------------------------------------------
dig_() {
	# try to dig host $2 on nameserver $1
	nameserver_="$1"
	host_="$2"
	dig_=$( getPath_ 'dig' )
	if [ -x "$dig_" ]; then
		# dig, use short answer, one try, default timeout (5s)
		# if error (such as nameserver not reachable) fail test
		# if no entries, fail test
		# otherwise, pass
		entries_=$( $dig_ @"$nameserver_" +tries=1 +short +time="$PS_NET_TIMEOUT" "$host_" 2> /dev/null)
		[ "$?" -ne 0 ] && return "$NOTPASSED_"
		count_=$( printf %s "$entries_" | wc -c )
		[ "$count_" -eq 0 ] && return "$NOTPASSED_"
		return "$PASSED_"
	else
		echoVerbose_ "skipping assertDNSLookup on '@$nameserver_ $host_', no dig found"
		asserts_=$((asserts_-1))
		return 0
	fi
}

# ______________________________________________________________________________
# echo the annotated <file> <annotation name>
findAnnotatedFunctions_() {

	file_="$1"
	annotation_="#$2$"

	# list all functions, 
	# remove the annotations themselves, 
	# remove the grep separator '--'
	# and delete '() {' so we're only left with the function names
	# also handle 'function foo }' style declaration
	# eliminate whitespace
	grep --after-context=1 "$annotation_" "$file_" | \
	grep -v "$annotation_" | \
	grep -v -- '--'| \
	sed 's/[\(\)]//g' | sed 's/{.*//g' | \
	sed 's/function[\ \t]//g' | \
	tr -d '[:blank:]'
	
}


# ______________________________________________________________________________
# Evaluate an assertion <operator 1> <op> <operator 2>
evaluateTestExpr_() {

	# bookeeping: skipping asserts and assert counting
	[ -n "$SKIPPING__" ] && return 0
	[ -z "$asserts_" ] && asserts_=0
	asserts_=$((asserts_+1))

	op1_="$1"
	operator_="$2"
	op2_="$3"
	passed_="$NOTPASSED_"

#TODO: provide more helpful error messages when doing common mistakes such as
# assertTrue 0 'message'

	# if we do a case we avoid using evil 'eval'
	case "$operator_" in
	
	'-eq')
		if [ "$op1_" -eq "$op2_" ]; then passed_="$PASSED_"; fi
	;;
	'-ne')
		if [ "$op1_" -ne "$op2_" ]; then passed_="$PASSED_"; fi
	;;
	'=')
		if [ "$op1_" = "$op2_" ]; then passed_="$PASSED_"; fi
	;;
	'!=')
		if [ "$op1_" != "$op2_" ]; then passed_="$PASSED_"; fi
	;;	
	'ping')
		ping_ "$op1_"
		if [ "$?" -eq 0 ]; then passed_="$PASSED_"; fi
	;;
	'tcpconnect')
		tcpconnect_ "$op1_" "$op2_"
		if [ "$?" -eq 0 ]; then passed_="$PASSED_"; fi	
	;;
	'dig')
		dig_ "$op1_" "$op2_"
		if [ "$?" -eq "$PASSED_" ]; then passed_="$PASSED_"; fi	
	;;
	esac
	
	return "$passed_"
	
}



# ______________________________________________________________________________  
# output results of test <result> <test name> <message>
printTestResults_() {

	result_="$1"
	testName_="$2"
	message_="$3"
	if [ "$result_" -eq "$ERR_TESTNOTVALID_" ]; then
		echoerr_ "$testName_: Empty test statement"
	elif [ "$result_" -eq "$NOTPASSED_" ]; then
		if [ -z "$PS_FAILS_TO_STDERR" ]; then
			printf %s\\n "$message_"
		else 
			echoerr_ "$message_"
		fi
	elif [ "$result_" -eq "$ERR_" ]; then
		echoerr_ "$testName_: Unknown problem running test with parameters ($result_)"
	fi

}


# ______________________________________________________________________________  
# <message or op1> <op1 or op2> <op2 or nothing> <num params> <operator> <test name> <default message>
# test a binary assertion
testBinary_() {
	
	message_=
	op1_=
	op2_=
	numParams_="$4"
	operator_="$5"
	testName_="$6"
	defaultMessage_="$7"

	if [ "$numParams_" -eq 3 ]; then
		# full call with user supplied message
		message_="$1"
		op1_="$2"
		op2_="$3"
	elif [ "$numParams_" -eq 2 ]; then
		# default message so what we got on $1 was actually op1 and $2 was actually op2
		op1_="$1"
		op2_="$2"
		message_="$defaultMessage_"
	else
		echoerr_ "$testName_: Wrong number of parameters passed to test: '$numParams_'"
		exit "$ERR_PARAMS_"	
	fi
	
	echoTrace_ "$testName_ $op1_ $operator_ $op2_"

	evaluateTestExpr_ "$op1_" "$operator_" "$op2_"
	result_=$?
	printTestResults_ $result_ "$testName_" "$message_"

	exitIfFailedAndConfiguredToExit_ "$result_"
	return "$result_"
	
}


# ------------------------------------------------------------------------------
# <message or op1> <op1 or nothing> <num params> <operator> <test name> <default message>
testUnary_() {

	message_=
	op1_=
	numParams_="$3"
	operator_="$4"
	testName_="$5"
	defaultMessage_="$6"

	if [ "$numParams_" -eq 2 ]; then
		# full call with user supplied message
		message_="$1"
		op1_="$2"
	elif [ "$numParams_" -eq 1 ]; then
		# default message so what we got on $1 was op1
		op1_="$1"
		message_="$defaultMessage_"
	else
		echoerr_ "$testName_: Wrong number of parameters passed to test: '$numParams_'"
		exit "$ERR_PARAMS_"	
	fi
	
	echoTrace_ "$operator_ $op1_"

	evaluateTestExpr_ "$op1_" "$operator_" ''
	result_=$?
	printTestResults_ $result_ "$testName_" "$message_"

	exitIfFailedAndConfiguredToExit_ "$result_"
	return "$result_"

}


# ______________________________________________________________________________
# <input or message> <input or nothing> <number of parameters>  <expectingempty> <testname> <defaultmessage>
# Test an empty or not empty assertion, special case of unary assertion
testEmptyOrNot_() {

	input_=
	message_=
	numParams_="$3"
	expecting_="$4"
	testName_="$5"
	defaultMessage_="$6"

	if [ "$numParams_" -eq 1 ]; then
		# only input default message
		input_="$1"
		message_="$defaultMessage_"
	elif [ "$numParams_" -eq 2 ]; then
		message_="$1"
		input_="$2"
	else 
		echoerr_ "$testName_: Wrong number of parameters passed to test: '$numParams_'"
		exit $ERR_PARAMS_	
	fi;

	echoTrace_ "$testName_ $input_"

	[ -n "$SKIPPING__" ] && return 0
	[ -z "$asserts_" ] && asserts_=0
	asserts_=$((asserts_+1))
	
	result_=
	if [ -z "$input_" ]; then
		if [ "$expecting_" = 'empty' ]; then
			result_="$PASSED_"
		else
			result_="$NOTPASSED_"
		fi
	else 
		if [ "$expecting_" = 'empty' ]; then
			result_="$NOTPASSED_"
		else
			result_="$PASSED_"
		fi
	fi
	printTestResults_ $result_ 'assertZ' "$message_"
	
	exitIfFailedAndConfiguredToExit_ "$result_"
	return $result_
	
}


# PUBLIC FUNCTIONS

# ______________________________________________________________________________  
startSkippingTests() {
	SKIPPING__=1
}


# ______________________________________________________________________________  
stopSkippingTests() {
	unset SKIPPING__
}

# ______________________________________________________________________________  
isSkippingTests() {
	[ -z "$SKIPPING__" ] && return 1
	return 0
}


# ______________________________________________________________________________  
# [ message ] <value expected to be true (0)>
assertTrue() {
	if [ $# -eq 1 ]; then
		testBinary_ '0' "$1" '' 2 '-eq' 'assertTrue' "assertTrue failed: '$1' evaluates to false (non zero)"	
	elif [ $# -eq 2 ]; then
		testBinary_ "$1" '0' "$2" 3 '-eq' 'assertTrue' "assertTrue failed: '$2' evaluates to false (non zero)"
	else
		echoerr_ "assertTrue: Wrong number of parameters passed to test: '$#'"
		exit $ERR_PARAMS_	
	fi
}


# ______________________________________________________________________________
# [ message ] <value expected to be true (not 0)>  
assertFalse() {
	if [ $# -eq 1 ]; then
		testBinary_ '0' "$1" '' 2 '-ne' 'assertFalse' "assertFalse failed: '$1' evaluates to true (0)"	
	elif [ $# -eq 2 ]; then
		testBinary_ "$1" '0' "$2" 3 '-ne' 'assertFalse' "assertFalse failed: '$2' evaluates to true (0)"
	else
		echoerr_ "assertFalse: Wrong number of parameters passed to test: '$#'"
		exit $ERR_PARAMS_	
	fi
}


# ______________________________________________________________________________  
# [ message ] expected actual 
assertEq() {
	testBinary_ "$1" "$2" "$3" $# '-eq' 'assertEq' "assertEq failed: expecting $1 and got $2"
}


#_________________________________________________ 
# [ message ] <not expected> actual 
assertNe() {
	testBinary_ "$1" "$2" "$3" $# '-ne' 'assertNe' "assertNe failed: not expecting '$1' and got that value"
}


# _____________________________________________________________________________
assertEquals() {
	testBinary_ "$1" "$2" "$3" $# '=' 'assertEquals' "assertEquals failed: expecting '$1' and got '$2'"
}


# _____________________________________________________________________________
assertNotEquals() {
	testBinary_ "$1" "$2" "$3" $# '!=' 'assertNotEquals' "assertNotEquals failed: expecting '$1' and got '$2'"
}


# ______________________________________________________________________________
assertZ() {
	testEmptyOrNot_ "$1" "$2" $# 'empty' 'assertZ' "assertZ failed: '$1' is not empty"
}


# ______________________________________________________________________________
assertN() {
	testEmptyOrNot_ "$1" "$2" $# 'notempty' 'assertZ' "assertN failed: '$1' is empty"
}


## Networking tests

# ------------------------------------------------------------------------------
assertPing() {
	testUnary_ "$1" "$2" $# 'ping' 'assertPing' "assertPing failed: cannot ping '$1'"
}


# ------------------------------------------------------------------------------
assertTCPConnect() {
	testBinary_ "$1" "$2" "$3" $# 'tcpconnect' 'assertTCPConnect' "assertTCPConnect failed: cannot connect to '$1 $2'"
}

# ------------------------------------------------------------------------------
assertDNSLookup() {
	# [message] <nameserver>	<lookup>
	testBinary_ "$1" "$2" "$3" $# 'dig' 'assertDNSLookup' "assertDNSLookup failed: cannot lookup the DNS entry '$2' using '$1'"
}

# ------------------------------------------------------------------------------
assertPublicDNSLookup() {
	# [message] <lookup>
	if [ $# -eq 1 ]; then
		m_="assertPublicDNSLookup failed: cannot lookup the DNS entry '$1' using google dns"
		testBinary_ '8.8.8.8' "$1" '' 2 'dig' 'assertPublicDNSLookup' "$m_"
	elif [ $# -eq 2 ]; then
		# custom message, so note default message will never be usd
		testBinary_  "$1" '8.8.8.8' "$2" 3 'dig' 'assertPublicDNSLookup' ''
	else 
		echoerr_ "assertPublicDNSLookup: Wrong number of parameters passed to test: '$#'"
		exit "$ERR_PARAMS_"
	fi
}


# TODO filesystem tests


#### TESTING BEHAVIOUR ITSELF ####

if [ -z "$PS_SKIP_ALL" ]; then

script_="$0"
tests_=0
totalTests_=$(findAnnotatedFunctions_ "$script_" '@Test' | wc -l | tr -d ' ')
asserts_=0

echoVerbose_ "provashell: Found $totalTests_ tests"

# before script setup (if declared), we take the last one
start_=$(findAnnotatedFunctions_ "$script_" '@BeforeScript' | tail -1)
[ -n "$start_" ] && { echoVerbose_ "provashell: Executing '$start_'"; $start_; }

# establish individual test setup and teardown functions (if declared), last ones
before_=$(findAnnotatedFunctions_ "$script_" '@Before' | tail -1)
after_=$(findAnnotatedFunctions_ "$script_" '@After' | tail -1)

# run the tests themselves, yay!
# we are using for with an inline list instead of a pipe and a while read
# because we do not want the test to run in a pipeline subprocess, which
# allows us to increment variables and the like inside the loop
for t in `findAnnotatedFunctions_ "$script_" '@Test'`; do
	[ -n "$before_" ] && $before_
	echoVerbose_ "provashell: Running test '$t'"
	$t
	tests_=$((tests_+1))
	[ -n "$after_" ] && $after_
done


# after script setup (if declared)
 end_=$(findAnnotatedFunctions_ "$script_" '@AfterScript')
[ -n "$end_" ] && { echoVerbose_ "provashell: Executing '$end_'"; $end_; }

echoVerbose_ "provashell: checked $asserts_ assertions"
[ -z "$PS_QUIET" ] && echo "provashell: Ran $tests_ of $totalTests_ tests"
export PS_ASSERTS="$asserts_"
export PS_TESTS="$tests_"

fi
